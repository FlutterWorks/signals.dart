// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element

import 'base_node.dart' as p0;
import 'bool/bool_and.dart' as p1;
import 'bool/bool_equals.dart' as p2;
import 'bool/bool_exclusive_or.dart' as p3;
import 'bool/bool_inclusive_or.dart' as p4;
import 'bool/bool_node.dart' as p5;
import 'bool/bool_parse.dart' as p6;
import 'bool/bool_try_parse.dart' as p7;
import 'bool/optional_bool_node.dart' as p8;
import 'double/double_abs.dart' as p9;
import 'double/double_add.dart' as p10;
import 'double/double_ceil.dart' as p11;
import 'double/double_ceil_to_double.dart' as p12;
import 'double/double_clamp.dart' as p13;
import 'double/double_compare_to.dart' as p14;
import 'double/double_divide.dart' as p15;
import 'double/double_equal.dart' as p16;
import 'double/double_floor.dart' as p17;
import 'double/double_floor_to_double.dart' as p18;
import 'double/double_greater_than.dart' as p19;
import 'double/double_greater_than_equal.dart' as p20;
import 'double/double_infinity.dart' as p21;
import 'double/double_is_finite.dart' as p22;
import 'double/double_is_infinite.dart' as p23;
import 'double/double_is_nan.dart' as p24;
import 'double/double_is_negative.dart' as p25;
import 'double/double_less_than.dart' as p26;
import 'double/double_less_than_equal.dart' as p27;
import 'double/double_max_finite.dart' as p28;
import 'double/double_min_positive.dart' as p29;
import 'double/double_modulo.dart' as p30;
import 'double/double_multiply.dart' as p31;
import 'double/double_nan.dart' as p32;
import 'double/double_negate.dart' as p33;
import 'double/double_negative_infinity.dart' as p34;
import 'double/double_node.dart' as p35;
import 'double/double_parse.dart' as p36;
import 'double/double_remainder.dart' as p37;
import 'double/double_round.dart' as p38;
import 'double/double_round_to_double.dart' as p39;
import 'double/double_sign.dart' as p40;
import 'double/double_subtract.dart' as p41;
import 'double/double_to_double.dart' as p42;
import 'double/double_to_int.dart' as p43;
import 'double/double_to_num.dart' as p44;
import 'double/double_to_string.dart' as p45;
import 'double/double_to_string_as_exponential.dart' as p46;
import 'double/double_to_string_as_fixed.dart' as p47;
import 'double/double_to_string_as_precision.dart' as p48;
import 'double/double_truncate.dart' as p49;
import 'double/double_truncate_to_double.dart' as p50;
import 'double/double_truncating_division.dart' as p51;
import 'double/double_try_parse.dart' as p52;
import 'double/optional_double_node.dart' as p53;
import 'int/int_abs.dart' as p54;
import 'int/int_add.dart' as p55;
import 'int/int_bit_length.dart' as p56;
import 'int/int_bitwise_and.dart' as p57;
import 'int/int_bitwise_exclusive_or.dart' as p58;
import 'int/int_bitwise_negate.dart' as p59;
import 'int/int_bitwise_or.dart' as p60;
import 'int/int_bitwise_shift_left.dart' as p61;
import 'int/int_bitwise_shift_right.dart' as p62;
import 'int/int_bitwise_unsigned_shift_right.dart' as p63;
import 'int/int_ceil.dart' as p64;
import 'int/int_ceil_to_double.dart' as p65;
import 'int/int_clamp.dart' as p66;
import 'int/int_compare_to.dart' as p67;
import 'int/int_divide.dart' as p68;
import 'int/int_equal.dart' as p69;
import 'int/int_floor.dart' as p70;
import 'int/int_floor_to_double.dart' as p71;
import 'int/int_gcd.dart' as p72;
import 'int/int_greater_than.dart' as p73;
import 'int/int_greater_than_equal.dart' as p74;
import 'int/int_is_even.dart' as p75;
import 'int/int_is_finite.dart' as p76;
import 'int/int_is_infinite.dart' as p77;
import 'int/int_is_nan.dart' as p78;
import 'int/int_is_negative.dart' as p79;
import 'int/int_is_odd.dart' as p80;
import 'int/int_less_than.dart' as p81;
import 'int/int_less_than_equal.dart' as p82;
import 'int/int_mod_inverse.dart' as p83;
import 'int/int_mod_pow.dart' as p84;
import 'int/int_modulo.dart' as p85;
import 'int/int_multiply.dart' as p86;
import 'int/int_negate.dart' as p87;
import 'int/int_node.dart' as p88;
import 'int/int_parse.dart' as p89;
import 'int/int_remainder.dart' as p90;
import 'int/int_round.dart' as p91;
import 'int/int_round_to_double.dart' as p92;
import 'int/int_sign.dart' as p93;
import 'int/int_subtract.dart' as p94;
import 'int/int_to_double.dart' as p95;
import 'int/int_to_num.dart' as p96;
import 'int/int_to_radix_string.dart' as p97;
import 'int/int_to_signed.dart' as p98;
import 'int/int_to_string.dart' as p99;
import 'int/int_to_string_as_exponential.dart' as p100;
import 'int/int_to_string_as_fixed.dart' as p101;
import 'int/int_to_string_as_precision.dart' as p102;
import 'int/int_to_unsigned.dart' as p103;
import 'int/int_truncate.dart' as p104;
import 'int/int_truncate_to_double.dart' as p105;
import 'int/int_truncating_division.dart' as p106;
import 'int/int_try_parse.dart' as p107;
import 'int/optional_int_node.dart' as p108;
import 'math/math_acos.dart' as p109;
import 'math/math_asin.dart' as p110;
import 'math/math_atan.dart' as p111;
import 'math/math_atan2.dart' as p112;
import 'math/math_cos.dart' as p113;
import 'math/math_e.dart' as p114;
import 'math/math_exp.dart' as p115;
import 'math/math_ln10.dart' as p116;
import 'math/math_ln2.dart' as p117;
import 'math/math_log.dart' as p118;
import 'math/math_log10e.dart' as p119;
import 'math/math_log2e.dart' as p120;
import 'math/math_max.dart' as p121;
import 'math/math_min.dart' as p122;
import 'math/math_pi.dart' as p123;
import 'math/math_pow.dart' as p124;
import 'math/math_sin.dart' as p125;
import 'math/math_sqrt.dart' as p126;
import 'math/math_sqrt1_2.dart' as p127;
import 'math/math_sqrt2.dart' as p128;
import 'math/math_tan.dart' as p129;
import 'num/num_abs.dart' as p130;
import 'num/num_add.dart' as p131;
import 'num/num_ceil.dart' as p132;
import 'num/num_ceil_to_double.dart' as p133;
import 'num/num_clamp.dart' as p134;
import 'num/num_compare_to.dart' as p135;
import 'num/num_divide.dart' as p136;
import 'num/num_equal.dart' as p137;
import 'num/num_floor.dart' as p138;
import 'num/num_floor_to_double.dart' as p139;
import 'num/num_greater_than.dart' as p140;
import 'num/num_greater_than_equal.dart' as p141;
import 'num/num_is_finite.dart' as p142;
import 'num/num_is_infinite.dart' as p143;
import 'num/num_is_nan.dart' as p144;
import 'num/num_is_negative.dart' as p145;
import 'num/num_less_than.dart' as p146;
import 'num/num_less_than_equal.dart' as p147;
import 'num/num_modulo.dart' as p148;
import 'num/num_multiply.dart' as p149;
import 'num/num_negate.dart' as p150;
import 'num/num_node.dart' as p151;
import 'num/num_parse.dart' as p152;
import 'num/num_remainder.dart' as p153;
import 'num/num_round.dart' as p154;
import 'num/num_round_to_double.dart' as p155;
import 'num/num_sign.dart' as p156;
import 'num/num_subtract.dart' as p157;
import 'num/num_to_double.dart' as p158;
import 'num/num_to_int.dart' as p159;
import 'num/num_to_string.dart' as p160;
import 'num/num_to_string_as_exponential.dart' as p161;
import 'num/num_to_string_as_fixed.dart' as p162;
import 'num/num_to_string_as_precision.dart' as p163;
import 'num/num_truncate.dart' as p164;
import 'num/num_truncate_to_double.dart' as p165;
import 'num/num_truncating_division.dart' as p166;
import 'num/num_try_parse.dart' as p167;
import 'num/optional_num_node.dart' as p168;
import 'object/object_equals_string.dart' as p169;
import 'object/object_is.dart' as p170;
import 'object/object_is_double.dart' as p171;
import 'object/object_is_int.dart' as p172;
import 'object/object_is_list.dart' as p173;
import 'object/object_is_map.dart' as p174;
import 'object/object_is_not_null.dart' as p175;
import 'object/object_is_null.dart' as p176;
import 'object/object_is_num.dart' as p177;
import 'object/object_is_set.dart' as p178;
import 'object/object_node.dart' as p179;
import 'object/object_not_null.dart' as p180;
import 'object/object_to_string.dart' as p181;
import 'object/object_unwrap.dart' as p182;
import 'object/optional_object_fallback.dart' as p183;
import 'object/optional_object_node.dart' as p184;
import 'object/optional_object_to_string.dart' as p185;
import 'pattern/pattern_all_matches.dart' as p186;
import 'pattern/pattern_match_as_prefix.dart' as p187;
import 'regex/regex_all_matches.dart' as p188;
import 'regex/regex_escape.dart' as p189;
import 'regex/regex_first_match.dart' as p190;
import 'regex/regex_has_match.dart' as p191;
import 'regex/regex_node.dart' as p192;
import 'regex/regex_string_match.dart' as p193;
import 'regex/regex_to_pattern.dart' as p194;
import 'string/optional_string_node.dart' as p195;
import 'string/string_add.dart' as p196;
import 'string/string_code_unit_at.dart' as p197;
import 'string/string_code_units.dart' as p198;
import 'string/string_compare_to.dart' as p199;
import 'string/string_contains.dart' as p200;
import 'string/string_ends_with.dart' as p201;
import 'string/string_equals.dart' as p202;
import 'string/string_index.dart' as p203;
import 'string/string_index_of.dart' as p204;
import 'string/string_is_empty.dart' as p205;
import 'string/string_is_not_empty.dart' as p206;
import 'string/string_last_index_of.dart' as p207;
import 'string/string_length.dart' as p208;
import 'string/string_multiply.dart' as p209;
import 'string/string_node.dart' as p210;
import 'string/string_pad_left.dart' as p211;
import 'string/string_pad_right.dart' as p212;
import 'string/string_replace_all.dart' as p213;
import 'string/string_replace_first.dart' as p214;
import 'string/string_replace_range.dart' as p215;
import 'string/string_split.dart' as p216;
import 'string/string_starts_with.dart' as p217;
import 'string/string_substring.dart' as p218;
import 'string/string_to_lower_case.dart' as p219;
import 'string/string_to_pattern.dart' as p220;
import 'string/string_to_upper_case.dart' as p221;
import 'string/string_trim.dart' as p222;
import 'string/string_trim_left.dart' as p223;
import 'string/string_trim_right.dart' as p224;

void initializeMappers() {
  p0.BaseNodeMapper.ensureInitialized();
  p1.BoolAndMapper.ensureInitialized();
  p2.BoolEqualsMapper.ensureInitialized();
  p3.BoolExclusiveOrMapper.ensureInitialized();
  p4.BoolInclusiveOrMapper.ensureInitialized();
  p5.BoolNodeMapper.ensureInitialized();
  p6.BoolParseMapper.ensureInitialized();
  p7.BoolTryParseMapper.ensureInitialized();
  p8.OptionalBoolNodeMapper.ensureInitialized();
  p9.DoubleAbsMapper.ensureInitialized();
  p10.DoubleAddMapper.ensureInitialized();
  p11.DoubleCeilMapper.ensureInitialized();
  p12.DoubleCeilToDoubleMapper.ensureInitialized();
  p13.DoubleClampMapper.ensureInitialized();
  p14.DoubleCompareToMapper.ensureInitialized();
  p15.DoubleDivideMapper.ensureInitialized();
  p16.DoubleEqualMapper.ensureInitialized();
  p17.DoubleFloorMapper.ensureInitialized();
  p18.DoubleFloorToDoubleMapper.ensureInitialized();
  p19.DoubleGreaterThanMapper.ensureInitialized();
  p20.DoubleGreaterThanEqualMapper.ensureInitialized();
  p21.DoubleInfinityMapper.ensureInitialized();
  p22.DoubleIsFiniteMapper.ensureInitialized();
  p23.DoubleIsInfiniteMapper.ensureInitialized();
  p24.DoubleIsNanMapper.ensureInitialized();
  p25.DoubleIsNegativeMapper.ensureInitialized();
  p26.DoubleLessThanMapper.ensureInitialized();
  p27.DoubleLessThanEqualMapper.ensureInitialized();
  p28.DoubleMaxFiniteMapper.ensureInitialized();
  p29.DoubleMinPositiveMapper.ensureInitialized();
  p30.DoubleModuloMapper.ensureInitialized();
  p31.DoubleMultiplyMapper.ensureInitialized();
  p32.DoubleNanMapper.ensureInitialized();
  p33.DoubleNegateMapper.ensureInitialized();
  p34.DoubleNegativeInfinityMapper.ensureInitialized();
  p35.DoubleNodeMapper.ensureInitialized();
  p36.DoubleParseMapper.ensureInitialized();
  p37.DoubleRemainderMapper.ensureInitialized();
  p38.DoubleRoundMapper.ensureInitialized();
  p39.DoubleRoundToDoubleMapper.ensureInitialized();
  p40.DoubleSignMapper.ensureInitialized();
  p41.DoubleSubtractMapper.ensureInitialized();
  p42.DoubleToDoubleMapper.ensureInitialized();
  p43.DoubleToIntMapper.ensureInitialized();
  p44.DoubleToNumMapper.ensureInitialized();
  p45.DoubleToStringMapper.ensureInitialized();
  p46.DoubleToStringAsExponentialMapper.ensureInitialized();
  p47.DoubleToStringAsFixedMapper.ensureInitialized();
  p48.DoubleToStringAsPrecisionMapper.ensureInitialized();
  p49.DoubleTruncateMapper.ensureInitialized();
  p50.DoubleTruncateToDoubleMapper.ensureInitialized();
  p51.DoubleTruncatingDivisionMapper.ensureInitialized();
  p52.DoubleTryParseMapper.ensureInitialized();
  p53.OptionalDoubleNodeMapper.ensureInitialized();
  p54.IntAbsMapper.ensureInitialized();
  p55.IntAddMapper.ensureInitialized();
  p56.IntBitLengthMapper.ensureInitialized();
  p57.IntBitwiseAndMapper.ensureInitialized();
  p58.IntBitwiseExclusiveOrMapper.ensureInitialized();
  p59.IntBitwiseNegateMapper.ensureInitialized();
  p60.IntBitwiseOrMapper.ensureInitialized();
  p61.IntBitwiseShiftLeftMapper.ensureInitialized();
  p62.IntBitwiseShiftRightMapper.ensureInitialized();
  p63.IntBitwiseUnsignedShiftRightMapper.ensureInitialized();
  p64.IntCeilMapper.ensureInitialized();
  p65.IntCeilToDoubleMapper.ensureInitialized();
  p66.IntClampMapper.ensureInitialized();
  p67.IntCompareToMapper.ensureInitialized();
  p68.IntDivideMapper.ensureInitialized();
  p69.IntEqualMapper.ensureInitialized();
  p70.IntFloorMapper.ensureInitialized();
  p71.IntFloorToDoubleMapper.ensureInitialized();
  p72.IntGcdMapper.ensureInitialized();
  p73.IntGreaterThanMapper.ensureInitialized();
  p74.IntGreaterThanEqualMapper.ensureInitialized();
  p75.IntIsEvenMapper.ensureInitialized();
  p76.IntIsFiniteMapper.ensureInitialized();
  p77.IntIsInfiniteMapper.ensureInitialized();
  p78.IntIsNanMapper.ensureInitialized();
  p79.IntIsNegativeMapper.ensureInitialized();
  p80.IntIsOddMapper.ensureInitialized();
  p81.IntLessThanMapper.ensureInitialized();
  p82.IntLessThanEqualMapper.ensureInitialized();
  p83.IntModInverseMapper.ensureInitialized();
  p84.IntModPowMapper.ensureInitialized();
  p85.IntModuloMapper.ensureInitialized();
  p86.IntMultiplyMapper.ensureInitialized();
  p87.IntNegateMapper.ensureInitialized();
  p88.IntNodeMapper.ensureInitialized();
  p89.IntParseMapper.ensureInitialized();
  p90.IntRemainderMapper.ensureInitialized();
  p91.IntRoundMapper.ensureInitialized();
  p92.IntRoundToDoubleMapper.ensureInitialized();
  p93.IntSignMapper.ensureInitialized();
  p94.IntSubtractMapper.ensureInitialized();
  p95.IntToDoubleMapper.ensureInitialized();
  p96.IntToNumMapper.ensureInitialized();
  p97.IntToRadixStringMapper.ensureInitialized();
  p98.IntToSignedMapper.ensureInitialized();
  p99.IntToStringMapper.ensureInitialized();
  p100.IntToStringAsExponentialMapper.ensureInitialized();
  p101.IntToStringAsFixedMapper.ensureInitialized();
  p102.IntToStringAsPrecisionMapper.ensureInitialized();
  p103.IntToUnsignedMapper.ensureInitialized();
  p104.IntTruncateMapper.ensureInitialized();
  p105.IntTruncateToDoubleMapper.ensureInitialized();
  p106.IntTruncatingDivisionMapper.ensureInitialized();
  p107.IntTryParseMapper.ensureInitialized();
  p108.OptionalIntNodeMapper.ensureInitialized();
  p109.MathAcosMapper.ensureInitialized();
  p110.MathAsinMapper.ensureInitialized();
  p111.MathAtanMapper.ensureInitialized();
  p112.MathAtan2Mapper.ensureInitialized();
  p113.MathCosMapper.ensureInitialized();
  p114.MathEMapper.ensureInitialized();
  p115.MathExpMapper.ensureInitialized();
  p116.MathLn10Mapper.ensureInitialized();
  p117.MathLn2Mapper.ensureInitialized();
  p118.MathLogMapper.ensureInitialized();
  p119.MathLog10eMapper.ensureInitialized();
  p120.MathLog2eMapper.ensureInitialized();
  p121.MathMaxMapper.ensureInitialized();
  p122.MathMinMapper.ensureInitialized();
  p123.MathPiMapper.ensureInitialized();
  p124.MathPowMapper.ensureInitialized();
  p125.MathSinMapper.ensureInitialized();
  p126.MathSqrtMapper.ensureInitialized();
  p127.MathSqrt12Mapper.ensureInitialized();
  p128.MathSqrt2Mapper.ensureInitialized();
  p129.MathTanMapper.ensureInitialized();
  p130.NumAbsMapper.ensureInitialized();
  p131.NumAddMapper.ensureInitialized();
  p132.NumCeilMapper.ensureInitialized();
  p133.NumCeilToDoubleMapper.ensureInitialized();
  p134.NumClampMapper.ensureInitialized();
  p135.NumCompareToMapper.ensureInitialized();
  p136.NumDivideMapper.ensureInitialized();
  p137.NumEqualMapper.ensureInitialized();
  p138.NumFloorMapper.ensureInitialized();
  p139.NumFloorToDoubleMapper.ensureInitialized();
  p140.NumGreaterThanMapper.ensureInitialized();
  p141.NumGreaterThanEqualMapper.ensureInitialized();
  p142.NumIsFiniteMapper.ensureInitialized();
  p143.NumIsInfiniteMapper.ensureInitialized();
  p144.NumIsNanMapper.ensureInitialized();
  p145.NumIsNegativeMapper.ensureInitialized();
  p146.NumLessThanMapper.ensureInitialized();
  p147.NumLessThanEqualMapper.ensureInitialized();
  p148.NumModuloMapper.ensureInitialized();
  p149.NumMultiplyMapper.ensureInitialized();
  p150.NumNegateMapper.ensureInitialized();
  p151.NumNodeMapper.ensureInitialized();
  p152.NumParseMapper.ensureInitialized();
  p153.NumRemainderMapper.ensureInitialized();
  p154.NumRoundMapper.ensureInitialized();
  p155.NumRoundToDoubleMapper.ensureInitialized();
  p156.NumSignMapper.ensureInitialized();
  p157.NumSubtractMapper.ensureInitialized();
  p158.NumToDoubleMapper.ensureInitialized();
  p159.NumToIntMapper.ensureInitialized();
  p160.NumToStringMapper.ensureInitialized();
  p161.NumToStringAsExponentialMapper.ensureInitialized();
  p162.NumToStringAsFixedMapper.ensureInitialized();
  p163.NumToStringAsPrecisionMapper.ensureInitialized();
  p164.NumTruncateMapper.ensureInitialized();
  p165.NumTruncateToDoubleMapper.ensureInitialized();
  p166.NumTruncatingDivisionMapper.ensureInitialized();
  p167.NumTryParseMapper.ensureInitialized();
  p168.OptionalNumNodeMapper.ensureInitialized();
  p169.ObjectEqualsStringMapper.ensureInitialized();
  p170.ObjectIsMapper.ensureInitialized();
  p171.ObjectIsDoubleMapper.ensureInitialized();
  p172.ObjectIsIntMapper.ensureInitialized();
  p173.ObjectIsListMapper.ensureInitialized();
  p174.ObjectIsMapMapper.ensureInitialized();
  p175.ObjectIsNotNullMapper.ensureInitialized();
  p176.ObjectIsNullMapper.ensureInitialized();
  p177.ObjectIsNumMapper.ensureInitialized();
  p178.ObjectIsSetMapper.ensureInitialized();
  p179.ObjectNodeMapper.ensureInitialized();
  p180.ObjectNotNullMapper.ensureInitialized();
  p181.ObjectToStringMapper.ensureInitialized();
  p182.ObjectUnwrapMapper.ensureInitialized();
  p183.OptionalObjectFallbackMapper.ensureInitialized();
  p184.OptionalObjectNodeMapper.ensureInitialized();
  p185.OptionalObjectToStringMapper.ensureInitialized();
  p186.PatternAllMatchesMapper.ensureInitialized();
  p187.PatternMatchAsPrefixMapper.ensureInitialized();
  p188.RegexAllMatchesMapper.ensureInitialized();
  p189.RegexEscapeMapper.ensureInitialized();
  p190.RegexFirstMatchMapper.ensureInitialized();
  p191.RegexHasMatchMapper.ensureInitialized();
  p192.RegexNodeMapper.ensureInitialized();
  p193.RegexStringMatchMapper.ensureInitialized();
  p194.RegexToPatternMapper.ensureInitialized();
  p195.OptionalStringNodeMapper.ensureInitialized();
  p196.StringAddMapper.ensureInitialized();
  p197.StringCodeUnitAtMapper.ensureInitialized();
  p198.StringCodeUnitsMapper.ensureInitialized();
  p199.StringCompareToMapper.ensureInitialized();
  p200.StringContainsMapper.ensureInitialized();
  p201.StringEndsWithMapper.ensureInitialized();
  p202.StringEqualsMapper.ensureInitialized();
  p203.StringIndexMapper.ensureInitialized();
  p204.StringIndexOfMapper.ensureInitialized();
  p205.StringIsEmptyMapper.ensureInitialized();
  p206.StringIsNotEmptyMapper.ensureInitialized();
  p207.StringLastIndexOfMapper.ensureInitialized();
  p208.StringLengthMapper.ensureInitialized();
  p209.StringMultiplyMapper.ensureInitialized();
  p210.StringNodeMapper.ensureInitialized();
  p211.StringPadLeftMapper.ensureInitialized();
  p212.StringPadRightMapper.ensureInitialized();
  p213.StringReplaceAllMapper.ensureInitialized();
  p214.StringReplaceFirstMapper.ensureInitialized();
  p215.StringReplaceRangeMapper.ensureInitialized();
  p216.StringSplitMapper.ensureInitialized();
  p217.StringStartsWithMapper.ensureInitialized();
  p218.StringSubstringMapper.ensureInitialized();
  p219.StringToLowerCaseMapper.ensureInitialized();
  p220.StringToPatternMapper.ensureInitialized();
  p221.StringToUpperCaseMapper.ensureInitialized();
  p222.StringTrimMapper.ensureInitialized();
  p223.StringTrimLeftMapper.ensureInitialized();
  p224.StringTrimRightMapper.ensureInitialized();
}
